name: CI

on:
  push:
    branches:
    - master
  pull_request: {}

env:
  # Disable incremental compilation.
  #
  # Incremental compilation is useful as part of an edit-build-test-edit cycle,
  # as it lets the compiler avoid recompiling code that hasn't changed. However,
  # on CI, we're not making small edits; we're almost always building the entire
  # project from scratch. Thus, incremental compilation on CI actually
  # introduces *additional* overhead to support making future builds
  # faster...but no future builds will ever occur in any given CI environment.
  #
  # See https://matklad.github.io/2021/09/04/fast-rust-builds.html#ci-workflow
  # for details.
  CARGO_INCREMENTAL: 0
  # Allow more retries for network requests in cargo (downloading crates) and
  # rustup (installing toolchains). This should help to reduce flaky CI failures
  # from transient network timeouts or other issues.
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  # Don't emit giant backtraces in the CI logs.
  RUST_BACKTRACE: short

jobs:
  check:
    # Run `cargo check` first to ensure that the pushed code at least compiles.
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@main
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
    - name: Check
      uses: actions-rs/cargo@v1
      with:
        command: check
        args: --all --tests --benches

  cargo-hack:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # cargo hack --feature-powerset will have a significant permutation
        # number, we can't just use --all as it increases the runtime
        # further than what we would like to
        subcrate:
        - tracing-attributes
        - tracing-core
        - tracing-futures
        - tracing-log
        - tracing-macros
        - tracing-serde
        - tracing-tower
        # tracing and tracing-subscriber have too many features to be checked by
        # cargo-hack --feature-powerset, combinatorics there is exploding.
        #- tracing
        #- tracing-subscriber
    steps:
    - uses: actions/checkout@main
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
    - name: Install cargo-hack
      run: |
        curl -LsSf https://github.com/taiki-e/cargo-hack/releases/latest/download/cargo-hack-x86_64-unknown-linux-gnu.tar.gz | tar xzf - -C ~/.cargo/bin
    - name: cargo hack check
      working-directory: ${{ matrix.subcrate }}
      run: cargo hack check --feature-powerset --no-dev-deps

  test-versions:
    # Test against the stable, beta, and nightly Rust toolchains on ubuntu-latest.
    needs: check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, beta, nightly]
      fail-fast: false
    steps:
    - uses: actions/checkout@main
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        profile: minimal
        override: true
    - name: Run tests
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --all

  test-build-wasm:
    needs: check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # TODO(securityinsanity): slowly add wasm32 test runner to each crate, and move to seperate actions that run tests.
        subcrate:
        - tracing-appender
        - tracing-attributes
        - tracing-core
        - tracing-error
        - tracing-flame
        - tracing-journald
        - tracing-log
        - tracing-macros
        - tracing-opentelemetry
        - tracing-serde
        - tracing-subscriber
        - tracing-tower
      fail-fast: false
    steps:
    - uses: actions/checkout@main
    - uses: actions-rs/toolchain@v1
      with:
        target: wasm32-unknown-unknown
        toolchain: stable
        override: true
    - name: build all tests
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --no-run -p ${{ matrix.subcrate }}

  test-wasm:
    needs: check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        subcrate:
        - tracing
    steps:
    - uses: actions/checkout@main
    - uses: actions-rs/toolchain@v1
      with:
        target: wasm32-unknown-unknown
        toolchain: stable
        override: true
    - name: install test runner for wasm
      run:  curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
    - name: run wasm tests
      run: cd ${{ matrix.subcrate }} && wasm-pack test --node

  test-os:
    # Test against stable Rust across macOS, Windows, and Linux.
    needs: check
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
    steps:
    - uses: actions/checkout@main
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
    - name: Run tests
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --all

  test-unstable:
    # Test the `tracing-unstable` cfg flags
    env:
      RUSTFLAGS: "--cfg tracing_unstable"
    needs: check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@main
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
    - name: Run tests
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --all --features "valuable"

  style:
    # Check style.
    needs: check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@main
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: rustfmt
        profile: minimal
        override: true
    - name: rustfmt
      uses: actions-rs/cargo@v1
      with:
        command: fmt
        args: --all -- --check

  warnings:
    # Check for any warnings. This is informational and thus is allowed to fail.
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@main
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: clippy
        profile: minimal
    - name: Clippy
      uses: actions-rs/clippy-check@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        args: --all --examples --tests --benches -- -D warnings

  minimal-versions:
    # Check for minimal-versions errors where a dependency is too
    # underconstrained to build on the minimal supported version of all
    # dependencies in the dependency graph.
    name: minimal-versions
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          override: true
      - name: Install cargo-hack
        run: |
          curl -LsSf https://github.com/taiki-e/cargo-hack/releases/latest/download/cargo-hack-x86_64-unknown-linux-gnu.tar.gz | tar xzf - -C ~/.cargo/bin
      - name: "check --all-features -Z minimal-versions"
        run: |
          # Remove dev-dependencies from Cargo.toml to prevent the next `cargo update`
          # from determining minimal versions based on dev-dependencies.
          cargo hack --remove-dev-deps --workspace
          # Update Cargo.lock to minimal version dependencies.
          cargo update -Z minimal-versions
          cargo hack check \
            --package tracing \
            --package tracing-core \
            --package tracing-subscriber \
            --all-features --ignore-private
