name: Check MSRV

on:
  push:
    branches:
    - master
    - "v0.1.x"
  pull_request: {}

env:
  # Disable incremental compilation.
  #
  # Incremental compilation is useful as part of an edit-build-test-edit cycle,
  # as it lets the compiler avoid recompiling code that hasn't changed. However,
  # on CI, we're not making small edits; we're almost always building the entire
  # project from scratch. Thus, incremental compilation on CI actually
  # introduces *additional* overhead to support making future builds
  # faster...but no future builds will ever occur in any given CI environment.
  #
  # See https://matklad.github.io/2021/09/04/fast-rust-builds.html#ci-workflow
  # for details.
  CARGO_INCREMENTAL: 0
  # Allow more retries for network requests in cargo (downloading crates) and
  # rustup (installing toolchains). This should help to reduce flaky CI failures
  # from transient network timeouts or other issues.
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  # Don't emit giant backtraces in the CI logs.
  RUST_BACKTRACE: short
  MSRV: 1.49.0
  # TODO: remove this once tracing's MSRV is bumped.
  APPENDER_MSRV: 1.53.0

jobs:
  check-msrv:
    # Run `cargo check` on our minimum supported Rust version (1.49.0).
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - name: "install Rust ${{ env.MSRV }}"
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ env.MSRV }}
        profile: minimal
    - name: "install Rust nightly"
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        profile: minimal
    - name: Select minimal versions
      uses: actions-rs/cargo@v1
      with:
        command: update
        args: -Z minimal-versions
        toolchain: nightly
    - name: Check
      uses: actions-rs/cargo@v1
      with:
        command: check
        # skip the following crates:
        # - tracing-appender, as it has its own MSRV.
        #   TODO(eliza): remove this when appender is on the same MSRV as
        #   everything else
        # - the examples, as they are not published & we don't care about
        #   MSRV support for them.
        # - tracing-futures, as it depends on ancient tokio versions.
        #   TODO(eliza): remove this when the ancient tokio deps are dropped
        args: >-
          --workspace --all-features --locked
          --exclude=tracing-appender
          --exclude=tracing-examples
          --exclude=tracing-futures
        toolchain: ${{ env.MSRV }}

  # TODO: remove this once tracing's MSRV is bumped.
  check-msrv-appender:
    # Run `cargo check` on our minimum supported Rust version (1.53.0).
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - name: "install Rust ${{ env.APPENDER_MSRV }}"
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ env.APPENDER_MSRV }}
        profile: minimal
    - name: "install Rust nightly"
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        profile: minimal
    - name: Select minimal versions
      uses: actions-rs/cargo@v1
      with:
        command: update
        args: -Z minimal-versions
        toolchain: nightly
    - name: Check
      uses: actions-rs/cargo@v1
      with:
        command: check
        args: --all-features --locked -p tracing-appender
        toolchain: ${{ env.APPENDER_MSRV }}