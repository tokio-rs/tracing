name: Check Features

on:
  push:
    branches:
    - master
    - "v0.1.x"
  pull_request: {}

env:
  # Disable incremental compilation.
  #
  # Incremental compilation is useful as part of an edit-build-test-edit cycle,
  # as it lets the compiler avoid recompiling code that hasn't changed. However,
  # on CI, we're not making small edits; we're almost always building the entire
  # project from scratch. Thus, incremental compilation on CI actually
  # introduces *additional* overhead to support making future builds
  # faster...but no future builds will ever occur in any given CI environment.
  #
  # See https://matklad.github.io/2021/09/04/fast-rust-builds.html#ci-workflow
  # for details.
  CARGO_INCREMENTAL: 0
  # Allow more retries for network requests in cargo (downloading crates) and
  # rustup (installing toolchains). This should help to reduce flaky CI failures
  # from transient network timeouts or other issues.
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  # Don't emit giant backtraces in the CI logs.
  RUST_BACKTRACE: short

jobs:
  cargo-hack:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # cargo hack --feature-powerset will have a significant permutation
        # number, we can't just use --all as it increases the runtime
        # further than what we would like to
        subcrate:
        - tracing-attributes
        - tracing-core
        - tracing-futures
        - tracing-log
        - tracing-macros
        - tracing-serde
        - tracing-tower
        - tracing-opentelemetry
        - tracing
        - tracing-subscriber
    steps:
    - uses: actions/checkout@main
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
    - name: Install cargo-hack
      run: |
        curl -LsSf https://github.com/taiki-e/cargo-hack/releases/latest/download/cargo-hack-x86_64-unknown-linux-gnu.tar.gz | tar xzf - -C ~/.cargo/bin
    - name: cargo hack check
      working-directory: ${{ matrix.subcrate }}
      # tracing and tracing-subscriber have too many features to be checked by
      # cargo-hack --feature-powerset with all features in the powerset, so
      # exclude some
      run: |
        CARGO_HACK=(cargo hack check --feature-powerset --no-dev-deps)
        case "${{ matrix.subcrate }}" in
          tracing)
            EXCLUDE_FEATURES=(
              max_level_off max_level_error max_level_warn max_level_info
              max_level_debug max_level_trace release_max_level_off
              release_max_level_error release_max_level_warn
              release_max_level_info release_max_level_debug
              release_max_level_trace
            )
            ${CARGO_HACK[@]} --exclude-features "${EXCLUDE_FEATURES[*]}"
            ;;
          tracing-subscriber)
            INCLUDE_FEATURES=(fmt ansi json registry env-filter)
            ${CARGO_HACK[@]} --include-features "${INCLUDE_FEATURES[*]}"
            ;;
          *)
            ${CARGO_HACK[@]}
            ;;
        esac
      shell: bash

  features-stable:
    # Feature flag tests that run on stable Rust.
    # TODO(david): once tracing's MSRV goes up to Rust 1.51, we should be able to switch to
    # using cargo's V2 feature resolver (https://doc.rust-lang.org/cargo/reference/resolver.html#resolver-versions)
    # and avoid cd'ing into each crate's directory.
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@main
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
    - name: "Test log support"
      run: cargo test
      working-directory: "tracing/test-log-support"
    - name: "Test static max level"
      run: cargo test
      working-directory: "tracing/test_static_max_level_features"
    - name: "Test static max level (release)"
      run: cargo test --release
      working-directory: "tracing/test_static_max_level_features"
    - name: "Test tracing-core no-std support"
      run: cargo test --no-default-features
      working-directory: tracing
    - name: "Test tracing no-std support"
      run: cargo test --no-default-features
      working-directory: tracing
      # this skips running doctests under the `--no-default-features` flag,
      # as rustdoc isn't aware of cargo's feature flags.
    - name: "Test tracing-subscriber with all features disabled"
      run: cargo test --lib --tests --no-default-features
      working-directory: tracing-subscriber
